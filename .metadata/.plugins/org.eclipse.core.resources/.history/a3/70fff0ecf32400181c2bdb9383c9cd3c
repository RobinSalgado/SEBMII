/*
 * Copyright (c) 2017, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    i2c.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"


#include "MK64F12.h"

/*  SDK Included Files */
#include "board.h"
#include "fsl_debug_console.h"
#include "fsl_i2c.h"

#include "pin_mux.h"
#include "clock_config.h"

/* FreeRTOS kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

/* SDK drivers*/
#include "fsl_port.h"
#include "fsl_device_registers.h"
/*******************************************************************************
 * Definitions
 ******************************************************************************/
#define RTC_I2C_BASEADDR I2C0
#define ACCEL_I2C_CLK_SRC I2C0_CLK_SRC
#define I2C_BAUDRATE 100000U
#define FOXS8700_WHOAMI 0xC7U
//#define RTC_slave_address 0x6F
#define RTC_slave_address 0xA2
#define SEG 0x00
#define MINU 0x01
#define HRS 0x02
#define REAL_SEC 0x01111111

#define RTC_task_PRIORITY (configMAX_PRIORITIES - 2)

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

static void I2C_RTC_init(void);
static bool I2C_Write_RTC(I2C_Type *base, uint8_t device_addr, uint8_t reg_addr, uint8_t value);
static bool I2C_Read_RTC(I2C_Type *base, uint8_t device_addr, uint8_t reg_addr, uint8_t *rxBuff, uint32_t rxSize);

/*******************************************************************************
 * Variables
 ******************************************************************************/


i2c_master_handle_t RTC_handle;


volatile bool completionFlag = false;
volatile bool nakFlag = false;

/*******************************************************************************
 * Code
 ******************************************************************************/

static void i2c_master_callback(I2C_Type *base, i2c_master_handle_t *handle, status_t status, void *userData)
{
    /* Signal transfer success when received success status. */
    if (status == kStatus_Success)
    {
        completionFlag = true;
    }
    /* Signal transfer success when received success status. */
    if (status == kStatus_I2C_Nak)
    {
        nakFlag = true;
    }
}

void I2C_RTC_init(void)
{

    uint32_t sourceClock = 0;

    i2c_master_config_t masterConfig;

    I2C_MasterGetDefaultConfig(&masterConfig);

    masterConfig.baudRate_Bps = I2C_BAUDRATE;

    sourceClock = CLOCK_GetFreq(ACCEL_I2C_CLK_SRC);

    I2C_MasterInit(RTC_I2C_BASEADDR, &masterConfig, sourceClock);

}

static bool I2C_Write_RTC(I2C_Type *base, uint8_t device_addr, uint8_t reg_addr, uint8_t value)
{
    i2c_master_transfer_t masterXfer;
    memset(&masterXfer, 0, sizeof(masterXfer));

    masterXfer.slaveAddress = device_addr;
    masterXfer.direction = kI2C_Write;
    masterXfer.subaddress = reg_addr;
    masterXfer.subaddressSize = 1;
    masterXfer.data = &value;
    masterXfer.dataSize = 1;
    masterXfer.flags = kI2C_TransferDefaultFlag;

    /*  direction=write : start+device_write;cmdbuff;xBuff; */
    /*  direction=recive : start+device_write;cmdbuff;repeatStart+device_read;xBuff; */

    I2C_MasterTransferNonBlocking(RTC_I2C_BASEADDR, &RTC_handle, &masterXfer);

    /*  wait for transfer completed. */
    while ((!nakFlag) && (!completionFlag))
    {
    }

    nakFlag = false;

    if (completionFlag == true)
    {
        completionFlag = false;
        return true;
    }
    else
    {
        return false;
    }
}

static bool I2C_Read_RTC(I2C_Type *base, uint8_t device_addr, uint8_t reg_addr, uint8_t *rxBuff, uint32_t rxSize)
{
    i2c_master_transfer_t masterXfer;
    memset(&masterXfer, 0, sizeof(masterXfer));
    masterXfer.slaveAddress = device_addr;
    masterXfer.direction = kI2C_Read;
    masterXfer.subaddress = reg_addr;
    masterXfer.subaddressSize = 1;
    masterXfer.data = rxBuff;
    masterXfer.dataSize = rxSize;
    masterXfer.flags = kI2C_TransferDefaultFlag;

    /*  direction=write : start+device_write;cmdbuff;xBuff; */
    /*  direction=recive : start+device_write;cmdbuff;repeatStart+device_I2C_Read_RTC;xBuff; */

    I2C_MasterTransferNonBlocking(RTC_I2C_BASEADDR, &RTC_handle, &masterXfer);

    /*  wait for transfer completed. */
    while ((!nakFlag) && (!completionFlag))
    {
    }

    nakFlag = false;

    if (completionFlag == true)
    {
        completionFlag = false;
        return true;
    }
    else
    {
        return false;
    }
}


void periodic_task(void *pvParameters) {
	 uint8_t databyte = 0; //data to write
	        uint8_t write_reg = 0;
	        uint8_t readBuff[1];// byte for min, seg,hrs
	        uint8_t databyte_startCounting;
	        uint8_t hrs;
	        uint8_t min;
	        uint8_t seg;


	const TickType_t xFrequency = 1000;
	volatile uint16_t delay = 1000, i;
	// Initialise the xLastWakeTime variable with the current time.
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();

 for (;;) {


////	 for(i = 0; i < delay; i++);

	 /*Places  the task that  calls vTaskDelayUntil() into  the  Blocked  state  until  an
	  * absolute  time  is reached.Periodic tasks can use vTaskDelayUntil() to achieve a
	  * constant execution frequency.  */

	 // volatile uint16_t delay;
	 	 //        write_reg = 0x00;
	 	 //        databyte_startCounting = 0x80; //detailed RTCC REGISTER MAP page 10 (1000-000-0)
	 	         I2C_Write_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x00, 0x8s0);//pa q oscile

	 	 //        write_reg = 0x01;
	 	 //        databyte = 0x00;//min that i want
	 	         I2C_Write_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x01, 0x45);

	 	 //        write_reg = 0x02;
	 	 //               databyte = 0x11;//hour that i want
	 	                I2C_Write_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x02, 0x11);



	 	             I2C_Read_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x02, readBuff, 1);
	 	             hrs = readBuff[0];
	 	             I2C_Read_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x01, readBuff, 1);
	 	             min = readBuff[0];
	 	             I2C_Read_RTC(RTC_I2C_BASEADDR, RTC_slave_address, 0x00, readBuff, 1);
	 	             seg = readBuff[0];

	 	             seg = seg&REAL_SEC;//máscara para perder el 80 de oscilación y que empiece en 0

	PRINTF("HORA: %x, %x,%x",hrs,min,seg);

	//PRINTF("jotin\n");
	 vTaskDelayUntil( &xLastWakeTime, xFrequency );

  }
}


/*!
 * @brief Main function
 */
int main(void)
{

  	/* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();

    I2C_MasterTransferCreateHandle(RTC_I2C_BASEADDR, &RTC_handle, i2c_master_callback, NULL);
    I2C_RTC_init();



     xTaskCreate(periodic_task, "PERIODIC_TASK", configMINIMAL_STACK_SIZE, NULL, RTC_task_PRIORITY, NULL);

     vTaskStartScheduler();

     for(;;) { /* Infinite loop to avoid leaving the main function */
       __asm("NOP"); /* something to use as a breakpoint stop while looping */
     }


}
